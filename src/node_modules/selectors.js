import R from 'ramda';

// const getGoodsById = (state) => {
//     return R.map(id => R.prop(id, state.goods), state.goodsPage.ids)
// };
// export const getGoods = (state) => getGoodsById(state);

const getGoodsById = (id, state) => R.prop(id, state.goods);

export const getGoods = (state) => R.map(id => getGoodsById(id, state))(state.goodsPage.ids);

export const getCategories = (state) => {
  return state.categories.ids;
};

export const getActiveCategoriesId = (ownProps) => R.path(['params','id'])(ownProps);
export const checkAllCategories = (ownProps) => R.path(['location','pathname'])(ownProps);

const getUniqIdsAndAmoutInBasket = arrList => {
    let result = {};
    R.map(item => {
        for(let propkey in item) {
            if( result.hasOwnProperty(propkey) ) {
                result[propkey] = Number(result[propkey]) + Number(item[propkey]);
                continue
            } else { result[propkey] = Number(item[propkey]); }
        }
        return result
    })(arrList);
    return result
};
const propToArr = obj => {
  let arr = [];
  for(let key in obj) {
      arr.push({
          id : key,
          amount : obj[key]
      })
  }
  return arr
};

export const getGoodsInBasket = state => {
  const uniqIdAndAmout = getUniqIdsAndAmoutInBasket(state.basket);
  const arrUniqIdAndAmout = propToArr(uniqIdAndAmout);
  const goods = R.map(idAndAmout => R.assoc('amount', idAndAmout.amount, getGoodsById(idAndAmout.id, state)))(arrUniqIdAndAmout)

  return goods;
};

export const amount = state => {
    const uniqGoodsAnd = getGoodsInBasket(state);
    return R.compose(
        R.sum,
        R.pluck('amount')
    )(uniqGoodsAnd);
};
export const coast = state => {
    const uniqGoodsAnd = getGoodsInBasket(state);
    return R.compose(
        R.sum,
        R.map(good => R.multiply(Number(good.price.split(' ')[0]), Number(good.amount)))
    )(uniqGoodsAnd);
};

//------------------------------------------------------

export const goodsUniqSetId = (goods) => {
    const arrUniqSetIds = R.compose(
        R.uniq,
        R.pluck('setId')
    )(goods);

    const arrArrsSortGoodsBySetId = arrUniqSetIds.map( uniqSetId => goods.filter( good => good.setId === uniqSetId ));
    return arrArrsSortGoodsBySetId
};

export const getArrArrsGoodsByCategory = (arrArrsGoods, category) => {
    return arrArrsGoods.filter( arrGoods => R.equals(category, arrGoods[0].category) );
};

export const searchById = (state, ownProps) => {
    const arrArrsUniqSetId = goodsUniqSetId( getGoods(state) );
    const result = R.find(arr => R.find(R.propEq('id', ownProps.params.id))(arr))(arrArrsUniqSetId);
    return result;
};